Objective: Definiton and development of a completetest case for the simple
3D Display System.

Requirements: Trace on paper all the operations of the basic
3D graphics system to draw the 6 faces of a single cube (show all computations)

The cube is to be viewed with the focal point at the upper left corner
of the cube (0,1,0) and the camera position and orientation (r=25, 0=45, a=0)

1) show all function calls and their parameters
2) show all matricies that need to be calculated


__________________________________________________

- Lectures
  * 3D transform
  * Camera transform
  * Display transform

????????????????????
1) Get camera transform
2) Apply to all points

??????????????
*) can make aT the identity matrix!




__________________________________________________
	• 3D transforms
		○ 3D transformation matricies
			§ Translation
			§ Scaling
				□ To scale: Translate to origin, scale, translate back
			§ Rotation
				□ Different matrix for x, y, z
			§ General Rotation
				1) Translate point to origin
				2) Use rotation to rotate vector till it aligns with coord axis
					• (Rotate into y,z plane)
				3) Perform rotation about coord axis (we can use z)
					• (Rotate onto z-axis)
				4) Do desired rotation
				5) Reverse order of transformations
	• Camera transforms
		○ Our camera will always need to be on the positive z-axis
		○ Camera transform
		    1) Focal point
			• Point at "center of attention"
			2) Camera position
			• Location of eyepoint (pinhole)
			3) Up direction of camera
			4) World coord frame
		
	• Camera transform
		1) Translate to origin
		2) Rotate to the x-z plane
		3) Orient the camera
		4) Perspective transform

	• Perspective projection
		○ Take a point (x, y, z)
		○ … formula on page 9) of camera transform
		○ Forget about camera transform?
	• Perspective transformation
		○ [x y z 1] [Pr]
		○ Pr ---> in page 13 of Camera transform


	• After all done with all transformation matrices
		○ The camera is put at positive infinity
		○ We can forget about the z-value! ONLY AFTER ALL TRANSFORMS


	• DefineCameraTransform
		○ CAMERA (camera transform) constructed by……
		○ Two routines
			§ DefineElementaryTransform
				□ Intializeses 4x4 transofmration matrix
			§ BuildElementaryTransform
				□ Creates new transform by premultiplying a transform by a new transform (speciifed by args)
		○ **** follow code on pg. 6 of Display Transforms****
	• Draw3D() and Move3D()
		○ ******* code example *********
	• ApplyTransform()
		○ ******* code example *********



